// Hashmap-> unsorted, Treemap->sorted
class Solution {
    public String[] findRelativeRanks(int[] score) {
        TreeMap<Integer,Integer> map=new TreeMap<>(Collections.reverseOrder());
        int n=score.length;
        for(int i=0;i<n;i++){
            map.put(score[i],i);
        }

        String[] result = new String[n];
        int rank = 1; // Start ranking from 1
        for (int val : map.keySet()) {
            int index = map.get(val);
            if (rank == 1) {
                result[index] = "Gold Medal";
            } else if (rank == 2) {
                result[index] = "Silver Medal";
            } else if (rank == 3) {
                result[index] = "Bronze Medal";
            } else {
                result[index] = String.valueOf(rank);
            }
            rank++; // Increment rank for the next score
        }
        return result;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Priority Queue
class Solution {
    public String[] findRelativeRanks(int[] score) {
        int n=score.length;
        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)->score[b]-score[a]);
        for(int i=0;i<n;i++){
            pq.add(i); // adds index but sorted by score
        }
        String[] res=new String[n];
        int i=1;
        while(!pq.isEmpty()){
            int index=pq.poll(); //removes & retreives
            if(i>3){
                res[index]=Integer.toString(i);
            }
            else if(i==3){
                res[index]="Bronze Medal";
            }
             else if(i==2){
                res[index]="Silver Medal";
            }
             else if(i==1){
                res[index]="Gold Medal";
            }
            i++;
        }
        return res;
    }
}
